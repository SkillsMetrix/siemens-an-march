<div mat-dialog-title>
    <h3>Employee Registration Form</h3>

</div>
<form (ngSubmit)="addUser()" [formGroup]="userForm">
    <div mat-dialog-content class="content">
        <div class="row">
            <mat-form-field appearance="outline">
                <mat-label>First Name</mat-label>
                <input matInput type="text" placeholder="Enter Name" formControlName="uname">

                <mat-error *ngIf="userForm.controls['uname'].hasError('required')">
                    Name cant be blank
                </mat-error>

            </mat-form-field>
            <mat-form-field appearance="outline">
                <mat-label>Email</mat-label>
                <input matInput type="email" placeholder="Enter Email" formControlName="email">
                <mat-error *ngIf="userForm.controls['email'].hasError('emailDomain')">
                    domain must be siemens
                </mat-error>

            </mat-form-field>
        </div>
        <div class="row">
            <mat-form-field appearance="outline">
                <mat-label>Password</mat-label>
                <input matInput type="password" placeholder="Enter Password" formControlName="password">
            </mat-form-field>

            <mat-form-field appearance="outline">
                <mat-label>Choose DOB</mat-label>
                <input matInput [matDatepicker]="picker" formControlName="dob">
                <mat-hint>MM/DD/YY</mat-hint>
                <mat-datepicker-toggle matIconSuffix [for]="picker"></mat-datepicker-toggle>
                <mat-datepicker #picker></mat-datepicker>
            </mat-form-field>

        </div>

        <div class="row">
            <mat-radio-group aria-label="Select an Option" formControlName="gender">
                <mat-label><b>Gender</b></mat-label>
                <mat-radio-button value="male">Male</mat-radio-button>
                <mat-radio-button value="female">Female</mat-radio-button>
                <mat-radio-button value="others">Others</mat-radio-button>

            </mat-radio-group>
        </div>
        <div class="row">
            <mat-form-field appearance="outline">
                <mat-label>Education</mat-label>
                <mat-select formControlName="education">
                    <mat-option *ngFor="let edu of education" [value]="edu">{{edu}}</mat-option>
                </mat-select>
            </mat-form-field>
            <mat-form-field appearance="outline">
                <mat-label>Company</mat-label>
                <input matInput type="text" placeholder="Enter Company">
            </mat-form-field>
        </div>
        <div class="row">
            <mat-form-field appearance="outline">
                <mat-label>Experience</mat-label>
                <input matInput type="number" placeholder="Enter Overall Experience" formControlName="exp">
            </mat-form-field>

            <mat-form-field appearance="outline">
                <mat-label>Country</mat-label>
                <input matInput type="text" placeholder="Enter Country" formControlName="country">
            </mat-form-field>

        </div>

        <div mat-dialog-actions>
            <button mat-raised-button>Cancel</button>
            <button mat-raised-button color="primary" [disabled]="userForm.invalid">Save</button>

        </div>
    </div>
</form>


---------------


import { Component } from '@angular/core';
import { FormBuilder, FormControl, FormGroup, NgForm, Validators } from '@angular/forms';

@Component({
  selector: 'app-userform',
  templateUrl: './userform.component.html',
  styleUrl: './userform.component.css'
})
export class UserformComponent {
  userForm: FormGroup
  constructor(private fb: FormBuilder) {
    this.userForm = this.fb.group({
      uname: ['', [Validators.required]],
      email: ['', [Validators.required, this.emailDomainValidator]],
      password: ['', [Validators.required, Validators.minLength(6)]],
      dob: '',
      gender: '',
      education: '',
      company: '',
      exp: '',
      country: ''
    })

  }
  addUser() {
    console.log(this.userForm.value);

  }
  education: string[] = [
    'CA',
    'MCA',
    'Diploma',
    'Masters'
  ]
  emailDomainValidator(control: FormControl) {
    let email = control.value
    if (email && email.indexOf('@') != -1) {
      let [_, domain] = email.split('@')
      console.log(_);
      
      if (domain !== 'siemens.com') {
        return {
          emailDomain: {
            mydomain: domain
          }
        }
      }
    }
    return null
  }

}
